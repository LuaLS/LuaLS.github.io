---
import { getCollection } from "astro:content";

import Layout from "./Main.astro";
import type { CollectionEntry } from "astro:content";
import Icon from "~/components/common/Icon.astro";
import Remark from "~/components/common/Remark.astro";
import Footer from "~/components/layout/Footer.astro";
import type { MarkdownHeading } from "astro";
import path from "path";

const articles = await getCollection("wiki");

export const getStaticPaths = async () => {
  const articles = await getCollection("wiki");
  return articles.map((entry) => {
    return { params: { slug: entry.id }, props: { entry } };
  });
};

const { article, headings } = Astro.props;

const titleSlug = article.data.title.toLowerCase().replaceAll(" ", "-");
const hereSlug = path.basename(Astro.url.pathname);

export interface Props {
  article: CollectionEntry<"wiki">;
  headings: MarkdownHeading[];
}
---

<Layout title="Wiki" transition={true} displayFooter={false}>
  <div class="columns">
    <aside id="article-browser" class="sidebar">
      <button class="open"
        ><Icon
          name="newspaper"
          group="solid"
          ariaLabel="Open article browser"
        /></button
      >
      <button class="close"
        ><Icon
          name="x"
          group="solid"
          ariaLabel="Close article browser"
        /></button
      >
      <h2 class="title">Articles</h2>
      <div class="content">
        <nav>
          {
            articles
              .sort((a, b) => a.data.title.localeCompare(b.data.title))
              .map((article) =>
                article.id == hereSlug ? (
                  <a href={`/wiki/${article.id}/`} class="here">
                    {article.data.title}
                  </a>
                ) : (
                  <a href={`/wiki/${article.id}/`}>{article.data.title}</a>
                )
              )
          }
        </nav>
      </div>
    </aside>
    <div class="center">
      <main>
        <article>
          {
            article.data.incomplete && (
              <Remark type="WIP" display="compact">
                <p>This article is incomplete and info may be missing.</p>
              </Remark>
            )
          }
          <div class="article-metadata">
            <h1 id={titleSlug}>{article.data.title}</h1>
            <p>{article.data.description}</p>
          </div>
          <slot />
        </article>
        <div class="article-footer-links">
          <a
            class="edit-page"
            target="_blank"
            href={`https://github.com/LuaLS/LuaLS.github.io/tree/main/src/content/wiki/${article.id}.mdx`}
          >
            <Icon name="pencil" group="solid" /> Edit this page
          </a>
          <a
            class="open-issue"
            target="_blank"
            href={`https://github.com/LuaLS/LuaLS.github.io/issues/new?title=${encodeURIComponent(
              `Issue with wiki page "${article.id}"`
            )}`}
          >
            <Icon name="circle-dot" group="solid" /> Open Issue
          </a>
        </div>
      </main>
      <Footer />
    </div>
    <aside id="outline" class="sidebar">
      <button class="open"
        ><Icon name="list" group="solid" ariaLabel="Open outline" /></button
      >
      <button class="close"
        ><Icon name="x" group="solid" ariaLabel="Close outline" /></button
      >
      <h2 class="title">Outline</h2>
      <nav class="content">
        <ol>
          <li><a href={`#${titleSlug}`}>{article.data.title}</a></li>
          {
            headings.map((heading) => (
              <li class={`depth-${heading.depth}`}>
                <a href={`#${heading.slug}`}>{heading.text}</a>
              </li>
            ))
          }
        </ol>
      </nav>
    </aside>
  </div>
</Layout>

<script>
  import * as utils from "~/util/DOM";

  const sidebars = utils.assertElements("aside.sidebar");

  for (const sidebar of sidebars) {
    const openButton = utils.assertElement("button.open", sidebar);
    const closeButton = utils.assertElement("button.close", sidebar);

    openButton.addEventListener("click", () => {
      sidebar.setAttribute("open", "");
    });

    closeButton.addEventListener("click", () => {
      sidebar.removeAttribute("open");
    });
  }
</script>

<script>
  import lodash from "lodash";
  import * as utils from "~/util/DOM";

  const outline = utils.assertElement("#outline .content");
  const centerColumn = utils.assertElement<HTMLDivElement>(".columns .center");

  let init = true;
  let topLink: HTMLAnchorElement;
  const scrollOutline = lodash.debounce(
    (smooth = true) => {
      if (init) {
        smooth = false;
        init = false;

        // Flush debounced outline scroll functions when scrollend is fired (if browser supports it)
        document.addEventListener("scrollend", () => scrollOutline.flush());
        centerColumn.addEventListener("scrollend", () => scrollOutline.flush());
      }

      outline.scrollTo({
        top: topLink.offsetTop - outline.clientHeight / 2,
        behavior: smooth === false ? "instant" : "smooth",
      });
    },
    200,
    { leading: false, trailing: true }
  );

  const intersectionObserver = new IntersectionObserver((entries) => {
    for (const entry of entries) {
      const outlineLink = utils.assertElement<HTMLAnchorElement>(
        `a[href="#${entry.target.id}"]`,
        outline
      );

      if (entry.intersectionRatio > 0 && outlineLink) {
        outlineLink.classList.add("in-view");
        topLink = outlineLink;
      } else {
        outlineLink.classList.remove("in-view");
      }
    }
  });

  // Watch headings for intersections
  utils
    .assertElements("article .heading,.article-metadata h1")
    .forEach((heading) => intersectionObserver.observe(heading));

  // Watch for article scrolling to scroll outline
  centerColumn.addEventListener("scroll", () => scrollOutline());

  // Force browser to scroll to targeted heading on page load
  const target = centerColumn.querySelector<HTMLHeadingElement>(
    `article ${location.hash}`
  );
  if (target) {
    target.scrollIntoView();
  }
</script>

<style lang="scss">
  html {
    scroll-behavior: smooth;
    overscroll-behavior-block: none;
  }

  .article-footer-links {
    margin: 1em auto;
    display: flex;
    justify-content: center;
    gap: 1em;

    a {
      display: inline-block;
      box-sizing: border-box;
      padding: 0.15em 0.5em;
      border-radius: 0.33em;
      color: white;

      :global(i) {
        margin-right: 0.25em;
      }

      &.edit-page {
        background-color: #1e5c97;
      }
      &.open-issue {
        background-color: #008a2c;
      }
    }
  }

  aside.sidebar {
    --sidebar-width: 20em;
    background-color: #081f34;
    position: fixed;
    padding-bottom: 1em;
    top: 3.5em;
    width: var(--sidebar-width);
    z-index: 25;

    h2 {
      margin: 0.4em 0px 0.1em 0px;
    }

    button.open,
    button.close {
      border: none;
      color: white;

      &:hover {
        cursor: pointer;
      }
    }

    button.open {
      position: fixed;
      background-color: #0e3e6b;
      padding: 0.25em 0.5em;
      font-size: 1.5em;
      z-index: 5;
    }

    button.close {
      background: none;
      color: red;
      font-size: 1em;
      padding: 0.3em;
      position: absolute;
      top: 0.5em;
      right: 0.5em;
    }

    div.title {
      font-size: 2em;
      font-weight: 700;
      text-align: center;
      margin: 0.25em auto 0em auto;
    }

    .content {
      overflow-x: hidden;
      overflow-y: auto;
      max-height: calc(100% - 7em);
      box-sizing: border-box;
      padding: 0.5em;

      nav {
        margin: 1em auto;

        a {
          display: block;
        }
      }
    }

    &#article-browser {
      text-align: center;
      left: calc(-1 * var(--sidebar-width));
      transition: left ease-in-out 0.5s;

      button.open {
        left: 0px;
        top: 4em;
        border-radius: 0px 0.5em 0.5em 0px;
        transition: left ease-in-out 0.5s;
      }

      &[open] {
        left: 0px;

        button.open {
          left: -2.2em;
        }
      }

      nav {
        a {
          display: block;
          font-size: 1.15em;

          &.here {
            color: white;
          }
        }
      }
    }

    &#outline {
      right: calc(-1 * var(--sidebar-width));
      transition: right ease-in-out 0.5s;

      button.open {
        right: 0px;
        top: 4em;
        border-radius: 0.5em 0px 0px 0.5em;
        transition: right ease-in-out 0.5s;
      }

      &[open] {
        right: 0px;

        button.open {
          right: -2.2em;
        }
      }

      .content {
        ol {
          list-style: none;
          padding-left: 0px;

          li {
            --indent-scale: 1;
            text-overflow: ellipsis;
            overflow: hidden;
            word-break: break-word;
          }

          li.depth-2 {
            padding-left: calc(1em * var(--indent-scale));
          }
          li.depth-3 {
            padding-left: calc(2em * var(--indent-scale));
          }
          li.depth-4 {
            padding-left: calc(3em * var(--indent-scale));
          }
          li.depth-5 {
            padding-left: calc(4em * var(--indent-scale));
          }
          li.depth-6 {
            padding-left: calc(5em * var(--indent-scale));
          }

          a.in-view {
            color: white;
          }
        }
      }
    }
  }

  article {
    padding: 1em 4em;

    div.article-metadata {
      text-align: center;
      h1 {
        margin-bottom: 0px;
      }
      p {
        margin: 0px 0px 3em 0px;
        color: #ffffffaa;
      }
    }

    :global(img) {
      max-width: 100%;
      height: auto;
      display: block;
      margin: auto;
    }

    :global(svg) {
      display: block;
      margin: auto;
    }

    :global(video) {
      max-width: 100%;
      height: auto;
      display: block;
      margin: auto;
    }

    :global(table) {
      width: 100%;
      text-align: center;
      border-collapse: collapse;

      :global(th) {
        background-color: #3e3e3e;
      }
      :global(tr) {
        background-color: #1a1a1a;
      }
      :global(tr:nth-of-type(2n)) {
        background-color: #111111;
      }
    }

    :global(div.syntax) {
      font-size: 1.3em;
    }
  }

  :global(div.modified-timestamp) {
    text-align: center;
    margin: 3em auto 0px auto;

    :global(p) {
      opacity: 0.6;
      margin: 0px;
    }
  }

  @media screen and (min-width: 1600px) {
    html {
      max-height: 100%;
      overflow-y: hidden;
    }
    .columns {
      height: calc(100% - 3.5em);
      display: grid;
      grid-template-columns: 20% 60% 20%;
      grid-template-rows: 100%;

      div.center {
        overflow-y: auto;
        scroll-behavior: smooth;

        footer {
          display: flex;
        }
      }
    }

    :global(body > footer) {
      display: none;
    }

    aside.sidebar {
      position: static;
      z-index: 0;
      width: 100%;

      button.open,
      button.close {
        display: none;
      }

      .content {
        max-height: calc(100% - 3.5em);
      }
    }
  }

  @media screen and (max-width: 800px) {
    aside.sidebar {
      --sidebar-width: 70%;
    }

    article {
      padding: 1em 1.5em;
    }
  }

  @media screen and (max-width: 400px) {
    article {
      padding: 1em;
    }
  }

  article > div.metadata h1 {
    font-family: "Prompt";
    margin: 0.25em auto 0.25em auto;
  }
  article > div.metadata p {
    margin: 0px auto 3em auto;
    text-align: center;
  }
</style>
