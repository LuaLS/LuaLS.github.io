---
import { getCollection } from "astro:content";

import Layout from "./Main.astro";
import type { CollectionEntry } from "astro:content";
import Icon from "~/components/common/Icon.astro";
import Remark from "~/components/common/Remark.astro";
import Footer from "~/components/layout/Footer.astro";
import type { MarkdownHeading } from "astro";
import path from "path";

const articles = await getCollection("wiki");

export const getStaticPaths = async () => {
  const articles = await getCollection("wiki");
  return articles.map((entry) => {
    return { params: { slug: entry.slug }, props: { entry } };
  });
};

const { article, headings } = Astro.props;

const titleSlug = article.data.title.toLowerCase().replaceAll(" ", "-");
const hereSlug = path.basename(Astro.url.pathname);

export interface Props {
  article: CollectionEntry<"wiki">;
  headings: MarkdownHeading[];
}
---

<Layout title="Wiki" transition={true}>
  <div class="columns">
    <div id="article-browser" class="sidebar">
      <button class="open"><Icon name="newspaper" group="solid" /></button>
      <button class="close"><Icon name="x" group="solid" /></button>
      <div class="title">Articles</div>
      <div class="content">
        <nav>
          {
            articles
              .sort((a, b) => a.data.title.localeCompare(b.data.title))
              .map((article) =>
                article.slug == hereSlug ? (
                  <a href={`/wiki/${article.slug}/`} class="here">
                    {article.data.title}
                  </a>
                ) : (
                  <a href={`/wiki/${article.slug}/`}>{article.data.title}</a>
                )
              )
          }
        </nav>
      </div>
    </div>
    <div class="center">
      <main>
        <article>
          {
            article.data.incomplete && (
              <Remark type="WIP" display="compact">
                <p>This article is incomplete and info may be missing.</p>
              </Remark>
            )
          }
          <div class="article-metadata">
            <h1 id={titleSlug}>{article.data.title}</h1>
            <p>{article.data.description}</p>
          </div>
          <slot />
        </article>
        <div class="article-footer-links">
          <a
            class="edit-page"
            target="_blank"
            href={`https://github.com/LuaLS/LuaLS.github.io/tree/main/src/content/wiki/${article.slug}.mdx`}
          >
            <Icon name="pencil" group="solid" /> Edit this page
          </a>
          <a
            class="open-issue"
            target="_blank"
            href={`https://github.com/LuaLS/LuaLS.github.io/issues/new?title=${encodeURIComponent(
              `Issue with wiki page "${article.slug}"`
            )}`}
          >
            <Icon name="circle-dot" group="solid" /> Open Issue
          </a>
        </div>
      </main>
      <Footer />
    </div>
    <div id="outline" class="sidebar">
      <button class="open"><Icon name="list" group="solid" /></button>
      <button class="close"><Icon name="x" group="solid" /></button>
      <div class="title">Outline</div>
      <div class="content">
        <nav>
          <ol>
            <li><a href={`#${titleSlug}`}>{article.data.title}</a></li>
            {
              headings.map((heading) => (
                <li class={`depth-${heading.depth}`}>
                  <a href={`#${heading.slug}`}>{heading.text}</a>
                </li>
              ))
            }
          </ol>
        </nav>
      </div>
    </div>
  </div>
</Layout>

<script>
  const sidebars = document.querySelectorAll(".sidebar");

  for (const sidebar of sidebars) {
    const openButton = sidebar.querySelector("button.open");
    const closeButton = sidebar.querySelector("button.close");

    openButton?.addEventListener("click", () => {
      sidebar.setAttribute("open", "");
    });

    closeButton?.addEventListener("click", () => {
      sidebar.removeAttribute("open");
    });
  }
</script>

<script>
  const headings = document.querySelectorAll(
    "article .heading,.article-metadata h1"
  );
  const outline = document.querySelector("#outline .content");

  const intersectionObserver = new IntersectionObserver((entries) => {
    let topLink;

    for (const entry of entries) {
      const outlineLink = outline?.querySelector(
        `a[href="#${entry.target.id}"]`
      );

      if (entry.intersectionRatio > 0) {
        outlineLink?.classList.add("in-view");
        topLink = outlineLink as HTMLDivElement;
      } else {
        outlineLink?.classList.remove("in-view");
      }
    }

    const outlineHasScroll =
      (outline?.scrollHeight ?? 0) > (outline?.clientHeight ?? 0);

    if (outlineHasScroll && topLink) {
      outline?.scrollTo({
        top: topLink.offsetTop - outline.clientHeight / 2,
        behavior: "smooth",
      });
    }
  });

  headings.forEach((heading) => intersectionObserver.observe(heading));
</script>

<style lang="scss">
  html {
    scroll-behavior: smooth;
    overscroll-behavior-block: none;
  }

  .columns {
    position: relative;

    div.center {
      display: flex;
      flex-direction: column;
      justify-content: space-between;

      footer {
        display: none;
      }
    }
  }

  .article-footer-links {
    margin: 1em auto;
    display: flex;
    justify-content: center;
    gap: 1em;

    a {
      display: inline-block;
      box-sizing: border-box;
      padding: 0.15em 0.5em;
      border-radius: 0.33em;
      color: white;

      :global(i) {
        margin-right: 0.25em;
      }

      &.edit-page {
        background-color: #1e5c97;
      }
      &.open-issue {
        background-color: #008a2c;
      }
    }
  }

  .sidebar {
    --sidebar-width: 20em;
    background-color: #081f34;
    height: 100%;
    position: fixed;
    top: 3.5em;
    width: var(--sidebar-width);
    z-index: 25;

    button.open,
    button.close {
      border: none;
      color: white;

      &:hover {
        cursor: pointer;
      }
    }

    button.open {
      position: fixed;
      background-color: #0e3e6b;
      padding: 0.25em 0.5em;
      font-size: 1.5em;
      z-index: 5;
    }

    button.close {
      background: none;
      color: red;
      font-size: 1em;
      padding: 0.3em;
      position: absolute;
      top: 0.5em;
      right: 0.5em;
    }

    div.title {
      font-size: 2em;
      font-weight: 700;
      text-align: center;
      margin: 0.25em auto 0em auto;
    }

    .content {
      overflow-x: hidden;
      overflow-y: auto;
      max-height: calc(100% - 7em);
      box-sizing: border-box;
      padding: 0.5em;

      nav {
        margin: 1em auto;

        a {
          display: block;
        }
      }
    }

    &#article-browser {
      text-align: center;
      left: calc(-1 * var(--sidebar-width));
      transition: left ease-in-out 0.5s;

      button.open {
        left: 0px;
        top: 4em;
        border-radius: 0px 0.5em 0.5em 0px;
        transition: left ease-in-out 0.5s;
      }

      &[open] {
        left: 0px;

        button.open {
          left: -2em;
        }
      }

      nav {
        a {
          display: block;
          font-size: 1.15em;

          &.here {
            color: white;
          }
        }
      }
    }

    &#outline {
      right: calc(-1 * var(--sidebar-width));
      transition: right ease-in-out 0.5s;

      button.open {
        right: 0px;
        top: 4em;
        border-radius: 0.5em 0px 0px 0.5em;
        transition: right ease-in-out 0.5s;
      }

      &[open] {
        right: 0px;

        button.open {
          right: -2em;
        }
      }

      .content {
        ol {
          list-style: none;
          padding-left: 0px;

          li {
            --indent-scale: 1;
            text-overflow: ellipsis;
            overflow: hidden;
            word-break: break-word;
          }

          li.depth-2 {
            padding-left: calc(1em * var(--indent-scale));
          }
          li.depth-3 {
            padding-left: calc(2em * var(--indent-scale));
          }
          li.depth-4 {
            padding-left: calc(3em * var(--indent-scale));
          }
          li.depth-5 {
            padding-left: calc(4em * var(--indent-scale));
          }
          li.depth-6 {
            padding-left: calc(5em * var(--indent-scale));
          }

          a.in-view {
            color: white;
          }
        }
      }
    }
  }

  article {
    padding: 1em 4em;

    div.article-metadata {
      text-align: center;
      h1 {
        margin-bottom: 0px;
      }
      p {
        margin: 0px 0px 3em 0px;
        color: #ffffffaa;
      }
    }

    :global(img) {
      max-width: 100%;
      height: auto;
      display: block;
      margin: auto;
    }

    :global(svg) {
      display: block;
      margin: auto;
    }

    :global(video) {
      max-width: 100%;
      height: auto;
      display: block;
      margin: auto;
    }

    :global(table) {
      width: 100%;
      text-align: center;
      border-collapse: collapse;

      :global(th) {
        background-color: #3e3e3e;
      }
      :global(tr) {
        background-color: #1a1a1a;
      }
      :global(tr:nth-of-type(2n)) {
        background-color: #111111;
      }
    }

    :global(div.syntax) {
      font-size: 1.3em;
    }
  }

  :global(div.modified-timestamp) {
    text-align: center;
    margin: 3em auto 0px auto;

    :global(p) {
      opacity: 0.6;
      margin: 0px;
    }
  }

  @media screen and (min-width: 1600px) {
    html {
      max-height: 100%;
      overflow-y: hidden;
    }
    .columns {
      height: calc(100% - 3.5em);
      display: grid;
      grid-template-columns: 20% 60% 20%;
      grid-template-rows: 100%;

      div.center {
        overflow-y: auto;
        scroll-behavior: smooth;

        footer {
          display: flex;
        }
      }
    }

    :global(body > footer) {
      display: none;
    }

    .sidebar {
      position: static;
      z-index: 0;
      width: 100%;

      button.open,
      button.close {
        display: none;
      }

      .content {
        max-height: calc(100% - 3.5em);
      }
    }
  }

  @media screen and (max-width: 800px) {
    .sidebar {
      --sidebar-width: 70%;
    }

    article {
      padding: 1em 1.5em;
    }
  }

  @media screen and (max-width: 400px) {
    article {
      padding: 1em;
    }
  }

  article > div.metadata h1 {
    font-family: "Prompt";
    margin: 0.25em auto 0.25em auto;
  }
  article > div.metadata p {
    margin: 0px auto 3em auto;
    text-align: center;
  }
</style>
